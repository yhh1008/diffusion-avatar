




const CANVAS_WIDTH = 1200;
const CANVAS_HEIGHT = 800;





const stable_sqrt = (number) => number > 0 && number < 0.001 ? Math.exp(0.5 * Math.log(number)) : Math.sqrt(number);

const betas = [0.0001564962795991276, 0.0002104677074292738, 0.00026444758275567803, 0.00031843882130155876, 0.0003724443412442824,
    0.0004264670638475243, 0.00048050991409354094, 0.0005345758213163299, 0.0005886677198418955, 0.0006427885496235186,
    0.0006969412568842426, 0.0007511287947628009, 0.0008053541239575468, 0.0008596202133820396, 0.000913930040816302,
    0.0009682865935662921, 0.0010226928691298154, 0.0010771518758611043, 0.0011316666336457226, 0.0011862401745801332,
    0.0012408755436533747, 0.0012955757994389527, 0.0013503440147920598, 0.0014051832775519024, 0.0014600966912512447,
    0.0015150873758372763, 0.0015701584683947, 0.0016253131238800345, 0.001680554515864796, 0.0017358858372857888,
    0.0017913103012068277, 0.0018468311415881233, 0.001902451614065881, 0.001958174996745221, 0.002014004590999985,
    0.002069943722287859, 0.002125995740972275, 0.002182164023163069, 0.002238451971563693, 0.0022948630163358574,
    0.0023514006159756073, 0.0024080682582032775, 0.002464869460871766, 0.0025218077728841326, 0.00257888677513185,
    0.0026361100814465965, 0.0026934813395712576, 0.0027510042321443606, 0.0028086824777076025, 0.0028665198317271434,
    0.002924520087638327, 0.0029826870779068315, 0.003041024675112358, 0.0030995367930526374, 0.003158227387870638,
    0.0032171004592026486, 0.003276160051350119, 0.003335410254478366, 0.0033948552058339354, 0.003454499090996599,
    0.0035143461451493385, 0.0035744006543799722, 0.0036346669570137546, 0.003695149444967405, 0.0037558525651418817,
    0.0038167808208403597, 0.003877938773222178, 0.0039393310427866535, 0.004000962310894085, 0.004062837321321289,
    0.004124960881852213, 0.004187337865909191, 0.004249973214220493, 0.0043128719365296275, 0.004376039113345609,
    0.004439479897736742, 0.004503199517167711, 0.00456720327538529, 0.004631496554344694, 0.004696084816194324,
    0.00476097360530392, 0.004826168550344789, 0.00489167536643087, 0.004957499857304981, 0.0050236479175926885,
    0.005090125535109125, 0.005156938793229204, 0.005224093873322344, 0.005291597057252018, 0.005359454729941593,
    0.005427673382013443, 0.005496259612499221, 0.005565220131623749, 0.00563456176366961, 0.005704291449919463,
    0.0057744162516822906, 0.005844943353407461, 0.0059158800658839494, 0.005987233829536143, 0.006059012217812465,
    0.006131222940672143, 0.006203873848176444, 0.0062769729341854985, 0.006350528340163253, 0.006424548359096671,
    0.006499041439534503, 0.006574016189746956, 0.006649481382009936, 0.006725445957025511, 0.0068019190284713815,
    0.00687890988769968, 0.006956428008574211, 0.0070344830524647906, 0.007113084873397568, 0.007192243523368447,
    0.007271969257823918, 0.007352272541325866, 0.007433164053387897, 0.007514654694510736, 0.007596755592412574,
    0.00767947810845937, 0.007762833844317751, 0.007846834648819634, 0.007931492625063652, 0.008016820137751957,
    0.008102829820778368, 0.008189534585074876, 0.008276947626725373, 0.008365082435364157, 0.008453952802860987,
    0.008543572832315105, 0.008633956947361021, 0.008725119901806688, 0.00881707678961463, 0.008909843055241784,
    0.00900343450434915, 0.009097867314902142, 0.009193158048679928, 0.009289323663201454, 0.009386381524098542,
    0.009484349417943738, 0.009583245565569443, 0.009683088635873638, 0.009783897760166638, 0.00988569254705396,
    0.009988493097898399, 0.010092320022878298, 0.010197194457670866, 0.010303138080795304, 0.010410173131632172,
    0.010518322429169946, 0.010627609391494652, 0.010738058056068978, 0.01084969310083117, 0.010962539866165022, 0.011076624377760802,
    0.011191973370435981, 0.011308614312944387, 0.011426575433831632, 0.01154588574837645, 0.011666575086698883, 0.011788674123055398,
    0.011912214406414101, 0.012037228392363541, 0.012163749476412078, 0.012291812028771276, 0.01242145143068163, 0.012552704112376856,
    0.012685607592755721, 0.012820200520875402, 0.012956522719336339, 0.013094615229689688, 0.013234520359950763, 0.013376281734359008,
    0.013519944345486645, 0.013665554608840669, 0.01381316042009606, 0.013962811215109117, 0.01411455803285877, 0.01426845358151041,
    0.014424552307753191, 0.014582910469623678, 0.014743586213015969, 0.014906639652092823, 0.015072132953841466, 0.015240130427010445,
    0.015410698615723306, 0.015583906398015102, 0.015759825089641133, 0.015938528553465003, 0.01612009331477815, 0.016304598682938543,
    0.016492126879746216, 0.016682763174958537, 0.016876596029457125, 0.017073717246545494, 0.017274222131934858, 0.017478209662997735,
    0.01768578266792664, 0.017897048015489525, 0.01811211681609759, 0.01833110463499743, 0.018554131718457767, 0.018781323233855174,
    0.019012809524690977, 0.01924872638163233, 0.019489215330741105, 0.019734423940215184, 0.019984506146996206, 0.020239622604815155,
    0.020499941055285742, 0.020765636723875658, 0.02103689274272369, 0.021313900602431324, 0.021596860635180626, 0.021885982531771542,
    0.022181485895327202, 0.022483600834792616, 0.022792568601591734, 0.023108642273125368, 0.023432087487207154, 0.023763183231905072,
    0.024102222695751796, 0.024449514183730092, 0.024805382105097418, 0.02517016803968608, 0.02554423189004129, 0.025927953127581227,
    0.026321732141868948, 0.026725991703038576, 0.02714117854866438, 0.02756776510756609, 0.028006251374535607, 0.028457166951655122,
    0.0289210732737053, 0.029398566037362017, 0.02989027785623588, 0.030396881166700473, 0.03091909141253868, 0.031457670540131044,
    0.032013430840111656, 0.032587239176236626, 0.033180021647725044, 0.03379276873786086, 0.034426541009044964, 0.03508247541316156,
    0.0357617922962451, 0.03646580318822745, 0.037195919482375994, 0.03795366212522244, 0.03874067245697754, 0.0395587243649842,
    0.04040973793951075, 0.04129579485316737, 0.04221915572307011, 0.04318227976057054, 0.04418784706796475, 0.04523878400772874,
    0.04633829214968743, 0.04748988139898125, 0.04869740802649969, 0.04996511846942753, 0.05129769994955102, 0.05270033918012851,
    0.054178790710167846, 0.055739456803273524, 0.05738948118741993, 0.05913685956868542, 0.06099057051256962, 0.0629607312095638,
    0.06505878382339492, 0.06729771966156395, 0.06969235043396549, 0.07225963855273343, 0.07501910202272033, 0.07799331433261147,
    0.08120852639496412, 0.084695446752037, 0.08849022908080839, 0.09263573418191551, 0.09718315970670344, 0.10219416889363264,
    0.10774370595273886, 0.11392377083808314, 0.12084855720672882, 0.12866156365810177, 0.13754562101679102, 0.14773732950622676,
    0.159548340431233, 0.17339757827571423, 0.18986154731889393, 0.20975570934872134, 0.23427169157695493, 0.26522020857661566,
    0.30548684389698744, 0.3599481903089483, 0.43746458404726596, 0.5555355681117499, 0.7499932543469323, 0.9999];

const timesteps = betas.length;
// prepare variables
const alphas = new Array(timesteps);
const alphas_cumprod = new Array(timesteps);
const sqrt_alphas_cumprod = new Array(timesteps);
const sqrt_one_minus_alphas_cumprod = new Array(timesteps);

betas.forEach((beta, index) => {
    alphas[index] = 1.0 - beta;

    alphas_cumprod[index] = (index > 0) ? alphas_cumprod[index - 1] * alphas[index] : alphas[index];
    sqrt_alphas_cumprod[index] = stable_sqrt(alphas_cumprod[index]);
    sqrt_one_minus_alphas_cumprod[index] = stable_sqrt(1 - alphas_cumprod[index]);
});



self.onmessage = (evt) => {
    self.postMessage({
        variables: {
            betas: betas,
            alphas: alphas,
            alphas_cumprod: alphas_cumprod,
            sqrt_alphas_cumprod: sqrt_alphas_cumprod,
            sqrt_one_minus_alphas_cumprod: sqrt_one_minus_alphas_cumprod
        }
    });

    if (!evt.data.image_data)
        return;
    const x_img = new OffscreenCanvas(evt.data.image_data.width, evt.data.image_data.height);
    x_img.getContext("2d").putImageData(evt.data.image_data, 0, 0);

    for (let timestep = 9; timestep < timesteps; timestep += 10) {
        const offscreen = q_sample(x_img, timestep);

        self.postMessage({
            image_data: offscreen.getContext("2d").getImageData(0, 0, offscreen.width, offscreen.height, {
                colorSpace: "srgb",
            }),
            timestep: timestep + 1
        });
    }

};

const generateNoiseImage = (width, height) => {
    // Standard Normal variate using Box-Muller transform.
    const generateGaussianNoise = (mean = 0, stdev = 1) => {
        let u = 1 - Math.random(); // Converting [0,1) to (0,1]
        let v = Math.random();
        let z = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
        // Transform to the desired mean and standard deviation:
        return z * stdev + mean;
    };

    const offscreen = new OffscreenCanvas(width, height);
    const ctx = offscreen.getContext("2d");

    const id = ctx.createImageData(width, height, {
        colorSpace: "srgb",
    });
    const pixels = id.data;

    for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
            const r = Math.max(
                0,
                Math.min(255, generateGaussianNoise() * 127.5 + 127.5)
            );
            const g = Math.max(
                0,
                Math.min(255, generateGaussianNoise() * 127.5 + 127.5)
            );
            const b = Math.max(
                0,
                Math.min(255, generateGaussianNoise() * 127.5 + 127.5)
            );

            const offset = (y * width + x) * 4;

            pixels[offset] = r;
            pixels[offset + 1] = g;
            pixels[offset + 2] = b;
            pixels[offset + 3] = 255;
        }
    }

    ctx.putImageData(id, 0, 0);

    return offscreen;
};

const q_sample = (x_img, t) => {
    const offscreen = new OffscreenCanvas(
        x_img.width,
        x_img.height
    );
    const ctx = offscreen.getContext("2d");

    const id = ctx.createImageData(x_img.width, x_img.height, {
        colorSpace: "srgb",
    });
    const pixels = id.data;

    const x0 = x_img.getContext("2d", { willReadFrequently: true }).getImageData(0, 0, x_img.width, x_img.height, {
        colorSpace: "srgb",
    }).data;

    const epsilon = generateNoiseImage(x_img.width, x_img.height)
        .getContext("2d", { willReadFrequently: true })
        .getImageData(0, 0, x_img.width, x_img.height, {
            colorSpace: "srgb",
        }).data;

    for (let y = 0; y < x_img.height; y++) {
        for (let x = 0; x < x_img.width; x++) {
            const offset = (y * x_img.width + x) * 4;
            for (let index = 0; index < 3; index++) {
                const ch =
                    sqrt_alphas_cumprod[t] * x0[offset + index] +
                    sqrt_one_minus_alphas_cumprod[t] * epsilon[offset + index];

                pixels[offset + index] = Math.min(255, ch);
            }
            pixels[offset + 3] = 255;
        }
    }

    ctx.putImageData(id, 0, 0);

    return offscreen;
};